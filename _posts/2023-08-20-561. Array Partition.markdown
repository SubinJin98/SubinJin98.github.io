---
layout: post
title:  "561. Array Partition"
excerpt: "LeetCode 561. Array Partition (배열 파티션)"
date:   2023-08-20T2:02:00Z
categories:
    - Coding Test
tags:
    - LeetCode
    - Array
    - Greedy
    - Sorting
    - Counting Sort
use_math: true

---

## ◽ 개요
---
### Related Topics
배열(Array)  
그리디(Greedy)  
정렬(Sorting)  
계수 정렬(Counting sort)

### 난이도
Easy
<br/><br/>

## ◽ 문제
---
> <https://leetcode.com/problems/array-partition/>{: target="_blank"}
<br/>

### Description
Given an integer array `nums` of `2n` integers, group these integers into `n` pairs `(a1, b1), (a2, b2), ..., (an, bn)` such that the sum of `min(ai, bi)` for all `i` is **maximized**. Return the maximized sum.
<br/><br/>

## ◽ 풀이
---
### 내 풀이
n개의 페어를 이용한 `min(a, b)`의 합으로 만들 수 있는 가장 큰 수를 출력하라.

```python
class Solution:
    def arrayPairSum(self, nums: List[int]) -> int:
        nums.sort()                         # 배열 정렬
        min_array = []                      # 페어 최소값 넣을 리스트 생성
        
        while len(nums) > 0:                # nums 리스트 요소가 1개 이상일 때
            a = nums.pop()                  # 내림차순으로 a 요소와
            b = nums.pop()                  # b 요소를 출력해서
            min_array.append(min(a, b))     # 더 작은 값을 최소값 리스트에 넣음
        
        result = sum(min_array)             # 값 합산
        return result
```
![array_partition](https://github.com/SubinJin98/SubinJin98.github.io/assets/116137904/dfe1bf8e-c134-4571-a619-199b5a8af6f6)

<br/>

---
### 다른 풀이
아래 내용은 '파이썬 알고리즘 인터뷰' 책을 참고했다.  
<br/>

**1. 오름차순 풀이**  

```python
def arrayPairSum(self, nums: List[int]) -> int:
        sum = 0
        pair = []
        nums.sort()
        
        for n in nums:
            # 앞에서부터 오름차순으로 페어를 만들어서 합 계산
            pair.append(n)
            if len(pair) == 2:
                sum += min(pair)
                pair = []
    
    return sum
```
정렬된 상태에서 앞에서부터 오름차순으로 인접 요소 페어Adjacent Elements Pair를 만들면  
가장 큰 $\alpha_1$과 $\alpha_2$ 페어들을 만들 수 있고 이 페어들의 합이 곧 만들 수 있는 최대 합이 된다.  

<br/>

**2. 짝수 번째 값 계산**  
<br/>
이렇게 페어에 대해 일일이 min() 값을 구하지 않아도 짝수 번째 값(0부터 시작하므로)을 더하면 될 것 같다.  
정렬된 상태에서는 짝수 번째에 항상 작은 값이 위치하기 때문이다.  

```python
def arrayPairSum(self, nums: List[int]) -> int:
        sum = 0
        nums.sort()
        
        for i, n in enumerate(nums):
            # 짝수 번째 값의 합 계산
            if i % 2 == 0:
                sum += n
    
    return sum
```

<br/>

**3. 파이썬다운 방식**  
<br/>
슬라이싱을 이용하면 단 한 줄로도 풀이가 가능하다.  

```python
def arrayPairSum(self, nums: List[int]) -> int:
    return sum(sorted(nums)[::2])
```

슬라이싱 구문 `[::2]`는 2칸씩 건너뛰므로 짝수 번째를 계산하는 것과 동일하다.  
