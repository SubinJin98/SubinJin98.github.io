---
layout: post
title:  "14501번:: 퇴사"
excerpt: "백준 14501번:: 퇴사 (동적 계획법)"
date:   2023-08-23T2:07:00Z
categories:
    - Coding Test
tags:
    - Baekjoon
    - Dinamic Programming
    - Brute-force
use_math: true
---

## ◽ 개요
---
### 알고리즘 유형
동적 계획법(Dinamic Programming)  
브루트포스 알고리즘(Brute-force)

### 난이도
Silver 3
<br/><br/>

## ◽ 문제
---
> <https://www.acmicpc.net/problem/14501>{: target="_blank"}

### 내용
상담원으로 일하고 있는 백준이는 퇴사를 하려고 한다.  
오늘부터 N+1일째 되는 날 퇴사를 하기 위해서, 남은 N일 동안 최대한 많은 상담을 하려고 한다.  
백준이는 비서에게 최대한 많은 상담을 잡으라고 부탁을 했고, 비서는 하루에 하나씩 서로 다른 사람의 상담을 잡아놓았다.  
각각의 상담은 상담을 완료하는데 걸리는 기간 Ti와 상담을 했을 때 받을 수 있는 금액 Pi로 이루어져 있다.  
N = 7인 경우에 다음과 같은 상담 일정표를 보자.  


| |1일|2일|3일|4일|5일|6일|7일|
|---|---|---|---|---|---|---|---|
|$T_i$|3|5|1|1|2|4|2|
|$P_i$|10|20|10|20|15|40|200|


1일에 잡혀있는 상담은 총 3일이 걸리며, 상담했을 때 받을 수 있는 금액은 10이다. 5일에 잡혀있는 상담은 총 2일이 걸리며, 받을 수 있는 금액은 15이다.  
상담을 하는데 필요한 기간은 1일보다 클 수 있기 때문에, 모든 상담을 할 수는 없다. 예를 들어서 1일에 상담을 하게 되면, 2일, 3일에 있는 상담은 할 수 없게 된다. 2일에 있는 상담을 하게 되면, 3, 4, 5, 6일에 잡혀있는 상담은 할 수 없다.  
또한, N+1일째에는 회사에 없기 때문에, 6, 7일에 있는 상담을 할 수 없다.  
퇴사 전에 할 수 있는 상담의 최대 이익은 1일, 4일, 5일에 있는 상담을 하는 것이며, 이때의 이익은 10+20+15=45이다.  
상담을 적절히 했을 때, 백준이가 얻을 수 있는 최대 수익을 구하는 프로그램을 작성하시오.  

### 입력
첫째 줄에 $N (1 ≤ N ≤ 15)$ 이 주어진다.  
둘째 줄부터 N개의 줄에 Ti와 Pi가 공백으로 구분되어서 주어지며, 1일부터 N일까지 순서대로 주어진다. $(1 ≤ Ti ≤ 5, 1 ≤ Pi ≤ 1,000)$  

### 출력
첫째 줄에 백준이가 얻을 수 있는 최대 이익을 출력한다.
<br/><br/><br/>

## ◽ 풀이
---
- **동적 계획법(Dynamic Programming)** : 최적화 이론의 한 기술이며, 특정 범위까지의 값을 구하기 위해서 그것과 다른 범위까지의 값을 이용하여 효율적으로 값을 구하는 알고리즘 설계 기법. 앞에서 썼던 답을 재활용하는 패러다임이라고 생각하면 된다.  

DP 너무 어렵다…  
일단 중요한 건 테이블 + 점화식을 어떻게 구현하느냐인듯  
아이디어 : 날짜를 하루씩 넘어가면서 퇴사일이 넘지 않은 경우 수익을 계산하고, 해당 수익을 누적시켜서 가장 큰 값(=최대 수익)을 구한다.  
날짜와 소요 일수, 수익을 넣은 이중 리스트 **table**을 만들고, 이를 바탕으로 **res** 리스트에 최대 수익을 계산한다.  

```python
n = int(input())
table = [[] for _ in range(n)]

for i in range(n):
    t, p = map(int, input().split())
    table[i].append(t)
    table[i].append(p)

res = [0] * n

for i in range(n):
    if i + table[i][0] > n:                                      # 현재 날짜 + 소요일수가 퇴사일을 넘을 때
        continue                                                 # 다음 반복으로 넘어감
    res[i] += table[i][1]                                        # 결과 리스트에 수익 추가

    j = 0                                                        # j = 날짜 관련 파라미터
    while True:
        if i + table[i][0] + j > n - 1:                          # 현재 날짜 + 소요 일수 + j가 퇴사일을 넘을 때
            break                                                # 반복문 종료하고 다음 날짜로 넘어감
        res[i+table[i][0]+j] = max(res[i+table[i][0]+j], res[i]) # 아닐 경우 최대 수익 계산해서 할당
        j += 1

print(max(res))
```
![Untitled](https://github.com/SubinJin98/SubinJin98.github.io/assets/116137904/b8bd11ec-65d3-4dce-bc5e-6593d0d9a8e5)

이런 식으로 구현이 된다  