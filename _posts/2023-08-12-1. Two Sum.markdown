---
layout: post
title:  "1. Two Sum"
excerpt: "LeetCode 1. Two Sum (두 수의 합)"
date:   2023-08-12T3:21:00Z
categories:
    - Coding Test
tags:
    - LeetCode
    - Array
    - Hash Table
use_math: true

---

## ◽ 개요
---
### Related Topics
배열(Array)  
해시 테이블(Hash Table)  

### 난이도
Easy
<br/><br/>

## ◽ 문제
---
> <https://leetcode.com/problems/two-sum/>{: target="_blank"}
<br/>

### Description
Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`.
You may assume that each input would have **exactly one solution**, and you may not use the same element twice.
You can return the answer in any order.
<br/><br/>

## ◽ 풀이
---
### 내 풀이
덧셈하여 타겟을 만들 수 있는 배열의 두 숫자 인덱스를 리턴하는 문제.  

```python
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)):
            for j in range(len(nums)):
                if nums[i] + nums[j] == target and i != j:
                    return i, j

```

![two sum](https://github.com/SubinJin98/SubinJin98.github.io/assets/116137904/5a555aa3-68a7-437c-8721-6a3581789e7c)  
for문 중첩이라 시간복잡도 측면에서 비효율적이다.  
<br/>

---
### 다른 풀이
아래 내용은 '파이썬 알고리즘 인터뷰' 책을 참고했다.  
<br/>

**1. 브루트 포스로 계산**  

```python
def twoSum(self, nums: List[int], target: int) -> List[int]:
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[i] + nums[j] == target:
                return [i, j]
```

내 풀이와 동일한 방법이고, 비효율적인 풀이법의 대표적인 예시라고 한다.  
<br/>

**2. in을 이용한 탐색**
```python
def twoSum(self, nums: List[int], target: int) -> List[int]:
    for i, n in enumerate(nums):                                                # 인덱스와 value 추출
        complement = target - n                                                 # target값에서 value를 뺀 값 생성

        if complement in nums[i + 1:]:                                          # complement가 nums 리스트의 i+1부터 끝까지 사이에 존재한다면
            return nums.index(n), nums[i + 1:].index(complement) + (i + 1)      # 현재 value값의 인덱스와 complement값의 인덱스 리턴
```

여기서 in의 시간 복잡도는 $O(n)$이고, 따라서 전체 시간 복잡도는 이전과 동일한 $O(n^2)$이다.  
그런데 여기서는 같은 시간 복잡도라도 `in` 연산 쪽이 훨씬 더 가볍고 빠르다.  
시간 복잡도는 상수항을 생략하기 때문에 알아차리기 힘들지만, 파이썬 내부 함수로 구현된 `in`의 상수항은 파이썬 레벨에서 매번 값을 비교하는 것에 비해 훨씬 적은 값이다.  
<br/>

**3. 첫 번째 수를 뺀 결과 키 조회**
```python
def twoSum(self, nums: List[int], target: int) -> List[int]:
    nums_map = {}
    # 키와 값을 바꿔서 딕셔너리로 저장
    for i, num in enumerate(nums):
        nums_map[num] = i
    
    # 타겟에서 첫 번째 수를 뺀 결과를 키로 조회
    for i, num in enumerate(nums):
        if target - num in nums_map and i != nums_map[target - num]:
            return nums.index(num), nums_map[target - num]
```

타겟에서 첫 번째 수를 빼면 두 번째 수를 바로 알아낼 수 있으므로, 두 번째 수를 키로 하고 인덱스를 값으로 하는 딕셔너리를 생성해서 조회한다.  
해시 테이블을 이용한 방식으로, 전체 시간 복잡도는 $O(n)$이 된다. 따라서 위의 방법들보다 훨씬 더 빠르게 실행되는 것을 확인할 수 있다.  
<br/>

**4. 조회 구조 개선**
```python
def twoSum(self, nums: List[int], target: int) -> List[int]:
    nums_map = {}
    # 하나의 for 문으로 통합
    for i, num in enumerate(nums):
        if target - num in nums_map:
            return [nums_map[target - num], i]
        nums_map[num] = i
```

딕셔너리 저장과 조회를 각각 처리했던 방식을 개선해서 하나의 for 문으로 통합했다.  
성능상으로 크게 이점이 있는 건 아니나, 코드가 좀 더 간결해졌다.  
<br/>

**5. 투 포인터 이용**
```python
def twoSum(self, nums: List[int], target: int) -> List[int]:
    left, right = 0, len(nums) - 1
    while not left == right:
        # 합이 타겟보다 크면 오른쪽 포인터를 왼쪽으로
        if nums[left] + nums[right] < target:
            left += 1
        # 합이 타겟보다 작으면 왼쪽 포인터를 오른쪽으로
        elif nums[left] + nums[right] > target:
            right -= 1
        else:
            return left, right
```

위와 같이 투 포인터를 이용해 문제를 푼다면 매우 깔끔해 보인다.  
그러나 사실 이 문제는 투 포인터로 풀 수 없다. nums 리스트가 정렬된 상태가 아니기 때문이다.  
만약 리스트를 정렬한다면 인덱스가 뒤섞여 제대로 된 답을 내놓을 수 없게 된다.  
따라서 이런 문제를 풀 때는 접근 방식에 유의해야 한다.
<br/>

