---
layout: post
title:  "24. Swap Nodes in Pairs"
excerpt: "LeetCode 24. Swap Nodes in Pairs (페어의 노드 스왑)"
date:   2023-09-03T8:27:00Z
categories:
    - Coding Test
tags:
    - LeetCode
    - Linked List
    - Recursion
use_math: true

---

## ◽ 개요
---
### Related Topics
연결된 리스트(Linked List)   
재귀(Recursion)  


### 난이도 
Medium
<br/><br/>

## ◽ 문제
---
> <https://leetcode.com/problems/swap-nodes-in-pairs/>{: target="_blank"}
<br/>

### Description
Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)
<br/><br/>

## ◽ 풀이
---
### 내 풀이
연결 리스트를 입력받아 페어 단위로 스왑하라.

```python
class Solution:
    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
        from collections import deque
        q = deque()

        while head:
            q.append(head.val)
            head = head.next

        cur = res = ListNode()

        while len(q) > 1:
            a = q.popleft()
            b = q.popleft()
            cur.next = ListNode(b)
            cur = cur.next
            cur.next = ListNode(a)
            cur = cur.next
        
        while len(q) == 1:
            c = q.popleft()
            cur.next = ListNode(c)
            cur = cur.next
        
        return res.next
```
![leetcode 24](https://github.com/SubinJin98/SubinJin98.github.io/assets/116137904/7b24eb85-c13b-4bfe-9ceb-a17c72f437c9)
정말이지 비효율적인 코드  
<br/>

---
### 다른 풀이
아래 내용은 '파이썬 알고리즘 인터뷰' 책을 참고했다.  
<br/>

**1. 값만 교환**  

```python
def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
    cur = head

    while cur and cur.next:
        # 값만 교환
        cur.val, cur.next.val = cur.next.val, cur.val
        cur = cur.next.next
    
    return head
```

연결 리스트의 노드 구조는 그대로 유지하되 값만 변경하는 방법. 매우 직관적이고 변칙적인 방법이다.  
사실 이 방식은 실용성과는 다소 거리가 있다. 면접 시 화이트보드에 이 같은 방식을 기술한다면, 면접관에게 "쉽게 풀기 위해 변칙적으로 풀이한다."는 식의 충분한 설명이 필요하다.
<br/>

**2. 반복 구조로 스왑**  

```python
def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
    root = prev = ListNode(None)
    prev.next = head
    while head and head.next:
        # b가 a(head)를 가리키도록 할당
        b = head.next
        head.next = b.next
        b.next = head

        # prev가 b를 가리키도록 할당
        prev.next = b

        # 다음 번 비교를 위해 이동
        head = head.next
        prev = prev.next.next
    return root.next
```

이전 풀이들과 달리 연결 리스트의 head를 가리키는 노드가 직접 바뀌는 풀이이므로 head를 리턴하지 못하고 그 이전 값을 root로 별도 설정한 다음 root.next를 리턴하게 했다.  
![swaplist](https://github.com/SubinJin98/SubinJin98.github.io/assets/116137904/f459ba16-4c40-4eb4-b3b8-a98294e5cf97)
<br/>

**3. 재귀 구조로 스왑**  

```python
def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
    if head and head.next:
        p = head.next
        # 스왑된 값 리턴 받음
        head.next = self.swapPairs(p.next)
        p.next = head
        return p
    return head
```

반복 풀이와 달리 포인터 역할을 하는 p 변수는 하나만 있어도 충분하며, 더미 노드를 만들 필요도 없이 head를 바로 리턴할 수 있어 공간 복잡도가 낮다.  
p는 head.next가 되고, p.next는 head가 된다. 물론 그 사이에 재귀 호출로 계속 스왑된 값을 리턴받게 된다.  
