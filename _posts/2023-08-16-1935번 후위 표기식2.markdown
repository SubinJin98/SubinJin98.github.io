---
layout: post
title:  "1935번:: 후위 표기식2"
excerpt: "백준 1935번:: 후위 표기식2 (스택)"
date:   2023-08-16T1:12:00Z
categories:
    - Coding Test
tags:
    - Baekjoon
    - Stack
use_math: true
---

## ◽ 개요
---
### 알고리즘 유형
스택(Stack)  

### 난이도
Silver 3
<br/><br/><br/>

## ◽ 문제
---
> <https://www.acmicpc.net/problem/1935>{: target="_blank"}

### 내용
후위 표기식과 각 피연산자에 대응하는 값들이 주어져 있을 때, 그 식을 계산하는 프로그램을 작성하시오.  

### 입력
첫째 줄에 피연산자의 개수$(1 ≤ N ≤ 26)$ 가 주어진다. 그리고 둘째 줄에는 후위 표기식이 주어진다.  
(여기서 피연산자는 A~Z의 영대문자이며, A부터 순서대로 N개의 영대문자만이 사용되며, 길이는 100을 넘지 않는다)  
그리고 셋째 줄부터 $N+2$번째 줄까지는 각 피연산자에 대응하는 값이 주어진다.  
3번째 줄에는 A에 해당하는 값, 4번째 줄에는 B에 해당하는 값, 5번째 줄에는 C ...이 주어진다, 그리고 피연산자에 대응 하는 값은 100보다 작거나 같은 자연수이다.  
후위 표기식을 앞에서부터 계산했을 때, 식의 결과와 중간 결과가 -20억보다 크거나 같고, 20억보다 작거나 같은 입력만 주어진다.  

### 출력
계산 결과를 소숫점 둘째 자리까지 출력한다.
<br/><br/><br/>

## ◽ 풀이
---
- 후위 표기식 : 연산기호가 뒤로 가는 표기식. (ex. 11+ = 2)  
- [알파벳-숫자 유니코드 포인트 표](https://heytech.tistory.com/89){: target="_blank"}


```python
ncnt = int(input())                 # 피연산자의 개수
back = list(input())                # 후위 표기식 리스트로 받음
dict = {}                           # 피연산자 대응 딕셔너리 생성

for i in range(ncnt):               # 유니코드 활용
    dict[chr(65+i)] = int(input())  # 'A' = 65, 'B' = 66, ...

cnt = []
result = 0

for i in back:                      # 후위 표기식 리스트 반복
    if i in dict:                   # i가 dict key로 존재한다면
        cnt.append(dict[i])         # cnt 리스트에 value 추가
    else:                           # 없다면 연산기호라는 뜻
        result = cnt.pop(-2)        # result에 끝에서 두 번째 수 넣어줌

        if i == '+':                # 연산기호 계산식
            result += cnt.pop()
        elif i == '-':
            result -= cnt.pop()
        elif i == '*':
            result *= cnt.pop()
        elif i == '/':
            result /= cnt.pop()

        cnt.append(result)          # 계산한 값을 다시 cnt에 넣어줌

print(f"{result:.2f}")              # 소수점 둘째 자리까지 출력
```