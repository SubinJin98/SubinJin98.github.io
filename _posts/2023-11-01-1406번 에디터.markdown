---
layout: post
title:  "1406번:: 에디터"
excerpt: "백준 1406번:: 에디터 (스택)"
date:   2023-11-01T1:48:00Z
categories:
    - Coding Test
tags:
    - Baekjoon
    - Stack
    - Linked List
use_math: true
---

## ◽ 개요
---
### 알고리즘 유형
자료 구조  
스택(Stack)  
연결 리스트(Linked List)  

### 난이도
Silver 2
<br/><br/>

## ◽ 문제
---
> <https://www.acmicpc.net/problem/1406>{: target="_blank"}

### 내용
한 줄로 된 간단한 에디터를 구현하려고 한다. 이 편집기는 영어 소문자만을 기록할 수 있는 편집기로, 최대 600,000글자까지 입력할 수 있다.  
이 편집기에는 '커서'라는 것이 있는데, 커서는 문장의 맨 앞(첫 번째 문자의 왼쪽), 문장의 맨 뒤(마지막 문자의 오른쪽), 또는 문장 중간 임의의 곳(모든 연속된 두 문자 사이)에 위치할 수 있다. 즉 길이가 L인 문자열이 현재 편집기에 입력되어 있으면, 커서가 위치할 수 있는 곳은 L+1가지 경우가 있다.  
이 편집기가 지원하는 명령어는 다음과 같다.  

![editor](https://github.com/SubinJin98/SubinJin98.github.io/assets/116137904/782710bd-76fb-4600-be4a-828d44c4f10c)

초기에 편집기에 입력되어 있는 문자열이 주어지고, 그 이후 입력한 명령어가 차례로 주어졌을 때, 모든 명령어를 수행하고 난 후 편집기에 입력되어 있는 문자열을 구하는 프로그램을 작성하시오. 단, 명령어가 수행되기 전에 커서는 문장의 맨 뒤에 위치하고 있다고 한다.
<br/>

### 입력
첫째 줄에는 초기에 편집기에 입력되어 있는 문자열이 주어진다. 이 문자열은 길이가 N이고, 영어 소문자로만 이루어져 있으며, 길이는 100,000을 넘지 않는다.  
둘째 줄에는 입력할 명령어의 개수를 나타내는 정수 $M(1 ≤ M ≤ 500,000)$이 주어진다.  
셋째 줄부터 M개의 줄에 걸쳐 입력할 명령어가 순서대로 주어진다. 명령어는 위의 네 가지 중 하나의 형태로만 주어진다.  

### 출력
첫째 줄에 모든 명령어를 수행하고 난 후 편집기에 입력되어 있는 문자열을 출력한다.
<br/><br/><br/>

## ◽ 풀이
---

- 첫 시도

```python
import sys
input = sys.stdin.readline

text = input().strip()
m = int(input())
lst = [input().strip() for _ in range(m)]
cursor = len(text)

for i in lst:
    if i == 'L':
        cursor = max(0, cursor-1)
    elif i == 'D':
        cursor = min(len(text), cursor+1)
    elif i == 'B':
        if cursor == 0:
            pass
        else:
            text = text[:cursor-1] + text[cursor:]
            cursor = max(0, cursor-1)

    elif i.split()[0] == 'P':
        text = text[:cursor] + i.split()[1] + text[cursor:]
        cursor += 1

print(text)
```

이 경우 문자열이 길어서 계속 시간초과에 걸리게 된다. 별다른 자료구조도 사용하지 않았다.  

![Untitled (1)](https://github.com/SubinJin98/SubinJin98.github.io/assets/116137904/158e7d94-a669-4254-9d3f-53ef20635227)

백준 게시판에서 아이디어를 얻어 다시 시도했다.  

- 두 번째 시도

```python
from collections import deque
import sys
input = sys.stdin.readline

text = input().strip()
m = int(input())
lst = [input().strip() for _ in range(m)]
cursor = len(text)
l_lst = deque(text)
r_lst = deque()

for i in lst:
    if i == 'L' and l_lst:
        r_lst.appendleft(l_lst[-1])
        del l_lst[-1]
    elif i == 'D' and r_lst:
        l_lst.append(r_lst[0])
        del r_lst[0]
    elif i == 'B' and l_lst:
        del l_lst[-1]
    elif i.split()[0] == 'P':
        l_lst.append(i.split()[1])

print("".join(l_lst + r_lst))
```

생각나는 대로 풀었는데, 지금 보니 pop을 사용했으면 훨씬 효율적이었을 것 같다
