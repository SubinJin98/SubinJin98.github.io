---
layout: post
title:  "18870번:: 좌표 압축"
excerpt: "백준 18870번:: 좌표 압축 (이분 탐색)"
date:   2023-08-02T12:44:00Z
categories:
    - codingtest
tags:
    - Baekjoon
    - BinarySearch
use_math: true
---

## ◽ 개요
---
### 알고리즘 유형
이분 탐색(Binary Search)

### 난이도
Silver 2
<br/><br/><br/>

## ◽ 문제
---
> <https://www.acmicpc.net/problem/18870>{: target="_blank"}

### 내용
수직선 위에 N개의 좌표 $X_1, X_2, ..., X_N$이 있다. 이 좌표에 좌표 압축을 적용하려고 한다.  
$X_i$를 좌표 압축한 결과 $X'_i$의 값은 $X_i > X_j$를 만족하는 서로 다른 좌표 $X_j$의 개수와 같아야 한다.  
$X_1, X_2, ..., X_N$에 좌표 압축을 적용한 결과 $X'_1, X'_2, ..., X'_N$를 출력해보자.

### 입력
첫째 줄에 상근이가 가지고 있는 숫자 카드의 개수 $N(1 ≤ N ≤ 500,000)$이 주어진다.  
둘째 줄에는 숫자 카드에 적혀있는 정수가 주어진다. 숫자 카드에 적혀있는 수는 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다.
셋째 줄에는 $M(1 ≤ M ≤ 500,000)$이 주어진다.  
넷째 줄에는 상근이가 몇 개 가지고 있는 숫자 카드인지 구해야 할 M개의 정수가 주어지며, 이 수는 공백으로 구분되어져 있다.  
이 수도 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다.

### 출력
첫째 줄에 입력으로 주어진 M개의 수에 대해서, 각 수가 적힌 숫자 카드를 상근이가 몇 개 가지고 있는지를 공백으로 구분해 출력한다.
<br/><br/><br/>

## ◽ 풀이
---

```python
ncnt = int(input())
n = list(map(int, input().split()))

# 중복 제거 & 정렬
nsrt = set(n)
nsrt = sorted(list(nsrt))

# binary search - 재귀
def bs(elm, lst, start = 0, end = None):
    if end == None:
        end = len(lst) - 1

    mid = (start+end) // 2

    if lst[mid] == elm:
        return mid
    elif lst[mid] < elm:
        start = mid + 1
    elif lst[mid] > elm:
        end = mid - 1

    if start > end:
        return 0

    return bs(elm, lst, start, end)

for i in range(ncnt):
    print(bs(n[i], nsrt), end = ' ')
            
```

이 문제도 배열 중복과 정렬 부분만 조심하면 어렵지 않게 풀린다.  
맞추긴 했는데 문제는 코드 효율성인 것 같다. 좀 더 연구가 필요함  
계속 반복문으로만 이진탐색을 돌려서 이번엔 재귀함수로 구현해봤는데, 형태는 거의 비슷하다.  