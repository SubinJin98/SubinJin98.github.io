---
layout: post
title:  "125. Valid Palindrome"
excerpt: "LeetCode 125. Valid Palindrome (문자열 조작)"
date:   2023-08-03T5:04:00Z
categories:
    - codingtest
tags:
    - LeetCode
    - StringManipulation
use_math: true

---

## ◽ 개요
---
### 알고리즘 유형
문자열 조작(String Manipulation)

### 난이도
Easy
<br/><br/>

## ◽ 문제
---
> <https://leetcode.com/problems/valid-palindrome/>{: target="_blank"}
<br/>

### Description
A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.  
Given a string s, return true if it is a palindrome, or false otherwise.
<br/><br/>

## ◽ 풀이
---
### 내 풀이
해당 문제는 입력받은 문자열이 거꾸로 뒤집어도 똑같은 문장(Palindrome, 회문)인지 판별하는 문제다.

```python
class Solution:
    def isPalindrome(self, s: str) -> bool:
        # 전처리 - 소문자 변경
        s = s.lower()                       # 입력받은 문자열을 소문자로 변경
        d = []                              # 문자열 분리할 리스트 생성

        # 전처리 - 특수문자 제거
        for i in range(len(s)):             # 문자열 s에 대해
            if s[i].isalnum():              # 각 요소가 영어/숫자/한국어라면(isalnum)
                d.append(s[i])              # 리스트 d에 요소를 저장
        
        # 팰린드롬 확인하는 함수 생성
        def check_palindrome(lst):
            start, end = 0, len(lst)-1      # 시작값 0, 끝값 문자열 마지막 값으로 설정 
            while start <= end:             # 시작값이 끝값보다 작거나 같을 때
                if lst[start] != lst[end]:  # 리스트 내 index 검색 결과가 같지 않으면
                    return False            # false 반환
                else:                       # 그렇지 않다면(같다면)
                    start += 1              # 시작값 + 1
                    end -= 1                # 끝값 - 1
            return True                     # 반복문을 빠져나올 때까지 모든 요소가 같다면 True 반환

        return(check_palindrome(d))
            
```
![result](https://github.com/SubinJin98/SubinJin98.github.io/assets/116137904/5c54e3fc-c57b-4e86-aae6-c9818fe387c8)

직전에 이진 탐색 문제만 계속 풀었더니  
아직도 그 방법론에서 벗어나지 못한 모습...  
풀면서도 쓸데없이 너무 복잡해지는거 아닌가 싶었다. 역시나 메모리를 너무 잡아먹는다  
<br/>

---
### 다른 풀이
아래 내용은 '파이썬 알고리즘 인터뷰' 책을 참고했다.  
<br/>

**1. 리스트를 이용한 최적화**  

```python
def isPalindrome(self, s: str) -> bool:
    strs = []                                   # 리스트 생성
    for char in s:                              # 문자열 분리
        if char.isalnum():                      # 특수문자 제거
            strs.append(char.lower())
    
    # 팰린드롬 여부 판별
    while len(strs) > 1:                        # 리스트 요소 개수가 1보다 클 때
        if strs.pop(0) != strs.pop():           # 첫 번째 요소와 마지막 요소가 다르다면
            return False                        # False 출력
    
    return True                                 # 아니라면 True 출력
            
```

리스트를 활용했다는 점에서 내 풀이랑 접근방식이 비슷하다고 느꼈다 (그렇다고 믿고 싶다...)  
팰린드롬 판별할 때 pop 함수 쓴다는 점이 인상깊었다.  
<br/>

**2. 데크 자료형을 이용한 최적화**  

위처럼 리스트만으로도 충분히 문제를 해결할 수 있지만,
데크Deque를 명시적으로 선언하면 좀 더 속도를 높일 수 있다고 한다.

```python
def isPalindrome(self, s: str) -> bool:
    # 자료형 데크로 선언
    strs: Deque = collections.deque()

    for char in s:
        if char.isalnum():
            strs.append(char.lower())
    
    while len(strs) > 1:
        if strs.popleft() != strs.pop()
        return False
    
    return True
            
```

여기서 strs: Deque = collections.deque()와 같이 자료형을 데크로 선언하는 것만으로 64밀리초에 실행됐다.  
이는 앞서 본 리스트 풀이 대비 거의 5배나 더 빠른 성능이다.  
이는 리스트의 pop(0)이 $O(n)$인데 반해, 데크의 popleft()는 $O(1)$이기 때문이며,  
각각 $n$번씩 반복하면, 리스트 구현은 $O(n^2)$, 데크 구현은 $O(n)$으로 성능 차이가 크다.  
<br/>

**3. 슬라이싱 사용**  

다음은 슬라이싱을 이용한 문제 풀이 코드다.

```python
def isPalindrome(self, s: str) -> bool:
    s = s.lower()
    # 정규식으로 불필요한 문자 필터링
    s = re.sub('[^a-z0-9]', '', s)

    return s == s[::-1]   # 슬라이싱
            
```
여기서는 별달리 알고리즘이라 부를 만한 게 없다.  
정규식으로 불필요한 문자를 필터링하고, 문자열을 조작할 수 있는 파이썬의 슬라이싱Slicing을 사용했다.  
앞서 풀이에서는 isalnum()으로 모든 문자를 일일이 점검했다. (나도 이렇게 접근했다)  
<br>
여기서는 문자열 전체를 한 번에 영숫자Alphanumeric만 걸러내도록 정규식으로 처리했다.  
또한 파이썬은 문자열을 배열이나 리스트처럼 자유롭게 슬라이싱할 수 있는 좋은 기능을 제공하며, [::-1]을 이용하면 뒤집을 수 있다.  
코드가 훨씬 더 줄어듦은 물론, 내부적으로 C로 빠르게 구현되어 있어 훨씬 더 좋은 속도를 기대할 수 있다.  