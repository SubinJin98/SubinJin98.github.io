---
layout: post
title:  "706. Design HashMap"
excerpt: "LeetCode 706. Design HashMap (해시맵 디자인)"
date:   2023-11-04T1:24:00Z
categories:
    - Coding Test
tags:
    - LeetCode
    - Array
    - Hash Table
    - Linked List
use_math: true

---

## ◽ 개요
---
### Related Topics
배열(Array)  
해시 테이블(Hash Table)
연결 리스트(Linked List)

### 난이도 
Easy
<br/><br/>

## ◽ 문제
---
> <https://leetcode.com/problems/design-hashmap/>{: target="_blank"}
<br/>

### Description
Design a HashMap without using any built-in hash table libraries.  
Implement the `MyHashMap` class:  
- `MyHashMap()` initializes the object with an empty map.
- `void put(int key, int value)` inserts a `(key, value)` pair into the HashMap. If the `key` already exists in the map, update the corresponding `value`.
- `int get(int key)` returns the `value` to which the specified `key` is mapped, or `-1` if this map contains no mapping for the `key`.
- `void remove(key)` removes the `key` and its corresponding `value` if the map contains the mapping for the `key`.
<br/><br/>

## ◽ 풀이
---
### 내 풀이

```python
class MyHashMap:

    def __init__(self):
        self.map = {}
        
    def put(self, key: int, value: int) -> None:
        try:
            self.map[key] = value
        except:
            self.map[key] = value

    def get(self, key: int) -> int:
        if key in self.map:
            return self.map[key]
        else:
            return -1

    def remove(self, key: int) -> None:
        self.map[key] = -1            
```

![res](https://github.com/SubinJin98/SubinJin98.github.io/assets/116137904/7980daab-90de-4a72-aa14-3b42231058ee)
간단한 방법으로 풀었다.  
마지막 remove 메소드를 정의할 때 처음엔 `del self.map[key]`로 작성했는데, 이러면 실행이 안 돼서 value를 -1로 만드는 방법으로 변환했다.  

<br/>

---
### 다른 풀이
아래 내용은 '파이썬 알고리즘 인터뷰' 책을 참고했다.  
<br/>

**1. 개별 체이닝 방식을 이용한 해시 테이블 구현**  

![chaining](https://github.com/SubinJin98/SubinJin98.github.io/assets/116137904/9533ab36-b292-4161-81f9-c16182887842)  

개별 체이닝은 해시 테이블의 기본적인 방식이며, 충돌이 발생할 경우 위의 그림과 같이 연결 리스트로 연결한다.  
간단한 원리를 요약하면 아래와 같다.  
1. 키의 해시 값을 계산한다.  
2. 해시 값을 이용해 배열의 인덱스를 구한다.  
3. 같은 인덱스가 있다면 연결 리스트로 연결한다.  

잘 구현한 경우 대부분의 탐색은 $O(1)$이지만 최악의 경우, 즉 모든 해시 충돌이 발생했다고 가정할 경우에는 $O(n)$이 된다.  
이 아이디어를 코드로 구현하면 아래와 같다.  

```python
class MyHashMap:
    # 초기화
    def __init__(self):
        self.size = 1000
        self.table = collections.defaultdict(ListNode)

    # 삽입   
    def put(self, key: int, value: int) -> None:
        index = key % self.size # 모듈로 연산
        # 인덱스에 노드가 없다면 삽입 후 종료
        # defaultdict이므로 키 값이 없어도 에러를 출력하지 않고 빈 ListNode를 생성함
        # 따라서 self.table[index] is None이 아니라 self.table[index].value is None으로 비교해야 함
        if self.table[index].value is None:
            self.table[index] = ListNode(key, value)
            return
        
        # 인덱스에 노드가 존재하는 경우 연결 리스트 처리
        p = self.table[index]
        while p:
            if p.key == key:
                p.value = value
                return
            if p.next is None:
                break
            p = p.next
        p.next = ListNode(key, value)

    # 조회
    def get(self, key: int) -> int:
        index = key % self.size # 모듈로 연산
        if self.table[index].value is None:
            return -1
        
        p = self.table[index]
        while p:
            if p.key == key:
                return p.value
            p = p.next
        return -1

    # 삭제
    def remove(self, key: int) -> None:
        index = key % self.size
        if self.table[index].value is None:
            return
        
        # 인덱스의 첫 번째 노드일 때 삭제 처리
        p = self.table[index]
        if p.key == key:
            self.table[index] = ListNode() if p.next is None else p.next
            return
        
        # 연결 리스트 노드 삭제
        prev = p
        while p:
            if p.key == key:
                prev.next = p.next
                return
            prev, p = p, p.next
```


