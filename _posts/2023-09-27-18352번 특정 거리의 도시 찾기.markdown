---
layout: post
title:  "18352번:: 특정 거리의 도시 찾기"
excerpt: "백준 18352번:: 특정 거리의 도시 찾기 (다익스트라 알고리즘)"
date:   2023-09-27T1:18:00Z
categories:
    - Coding Test
tags:
    - Baekjoon
    - Graph theory
    - BFS
    - Dijkstra
use_math: true
---

## ◽ 개요
---
### 알고리즘 유형
그래프 이론(Graph theory)  
너비 우선 탐색(BFS)  
다익스트라(Dijkstra)  
최단 경로

### 난이도
Silver 2
<br/><br/>

## ◽ 문제
---
> <https://www.acmicpc.net/problem/18352>{: target="_blank"}

### 내용
어떤 나라에는 1번부터 N번까지의 도시와 M개의 단방향 도로가 존재한다. 모든 도로의 거리는 1이다.  
이 때 특정한 도시 X로부터 출발하여 도달할 수 있는 모든 도시 중에서, 최단 거리가 정확히 K인 모든 도시들의 번호를 출력하는 프로그램을 작성하시오. 또한 출발 도시 X에서 출발 도시 X로 가는 최단 거리는 항상 0이라고 가정한다.  
예를 들어 N=4, K=2, X=1일 때 다음과 같이 그래프가 구성되어 있다고 가정하자.  
![다운로드](https://github.com/SubinJin98/SubinJin98.github.io/assets/116137904/d5e4c2fe-29a2-4a4d-9776-b52187541c5d)  
이 때 1번 도시에서 출발하여 도달할 수 있는 도시 중에서, 최단 거리가 2인 도시는 4번 도시 뿐이다.  2번과 3번 도시의 경우, 최단 거리가 1이기 때문에 출력하지 않는다.

<br/>

### 입력
첫째 줄에 도시의 개수 N, 도로의 개수 M, 거리 정보 K, 출발 도시의 번호 X가 주어진다. $(2 ≤ N ≤ 300,000, 1 ≤ M ≤ 1,000,000, 1 ≤ K ≤ 300,000, 1 ≤ X ≤ N)$  
둘째 줄부터 M개의 줄에 걸쳐서 두 개의 자연수 A, B가 공백을 기준으로 구분되어 주어진다. 이는 A번 도시에서 B번 도시로 이동하는 단방향 도로가 존재한다는 의미다. $(1 ≤ A, B ≤ N)$  
단, A와 B는 서로 다른 자연수이다.  

### 출력
X로부터 출발하여 도달할 수 있는 도시 중에서, 최단 거리가 K인 모든 도시의 번호를 한 줄에 하나씩 오름차순으로 출력한다.  
이 때 도달할 수 있는 도시 중에서, 최단 거리가 K인 도시가 하나도 존재하지 않으면 -1을 출력한다.
<br/><br/><br/>

## ◽ 풀이
---

```python
import heapq

INF = int(1e9)

n, m, k, x = map(int, input().split())
graph = [[] for _ in range(n+1)]
tbl = [INF] * (n+1)                    # 최단 거리 테이블

for _ in range(m):
    a, b = map(int, input().split())
    graph[a].append((b, 1))

def dijkstra(start):
    q = []
    heapq.heappush(q, (0, start))
    tbl[start] = 0
    while q:  # 큐가 비어있지 않다면
        # 가장 최단 거리가 짧은 노드에 대한 정보 꺼내기
        dist, now = heapq.heappop(q)
        # 처리된 적 있다면 무시하기
        if tbl[now] < dist:
            continue
        for i in graph[now]:
            cost = dist + i[1]
            # 현재 노드를 거쳐 다른 노드로 이동하는 거리가 더 짧은 경우
            if cost < tbl[i[0]]:
                tbl[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))

dijkstra(x)

res = []
for i in range(1, n+1):
    if tbl[i] == k:
        res.append(i)

if not res: print(-1)
else:
    for i in res:
        print(i, end = '\n')
```

다익스트라는 처음인데...너무 어렵다...  
