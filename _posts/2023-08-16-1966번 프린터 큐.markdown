---
layout: post
title:  "1966번:: 프린터 큐"
excerpt: "백준 1966번:: 프린터 큐 (큐)"
date:   2023-08-16T2:58:00Z
categories:
    - Coding Test
tags:
    - Baekjoon
    - Queue
use_math: true
---

## ◽ 개요
---
### 알고리즘 유형
큐(Queue)

### 난이도
Silver 3
<br/><br/><br/>

## ◽ 문제
---
> <https://www.acmicpc.net/problem/1966>{: target="_blank"}

### 내용
여러분도 알다시피 여러분의 프린터 기기는 여러분이 인쇄하고자 하는 문서를 인쇄 명령을 받은 ‘순서대로’, 즉 먼저 요청된 것을 먼저 인쇄한다. 여러 개의 문서가 쌓인다면 Queue 자료구조에 쌓여서 FIFO - First In First Out - 에 따라 인쇄가 되게 된다. 하지만 상근이는 새로운 프린터기 내부 소프트웨어를 개발하였는데, 이 프린터기는 다음과 같은 조건에 따라 인쇄를 하게 된다.  
1. 현재 Queue의 가장 앞에 있는 문서의 ‘중요도’를 확인한다.  
2. 나머지 문서들 중 현재 문서보다 중요도가 높은 문서가 하나라도 있다면, 이 문서를 인쇄하지 않고 Queue의 가장 뒤에 재배치 한다. 그렇지 않다면 바로 인쇄를 한다.  

예를 들어 Queue에 4개의 문서(A B C D)가 있고, 중요도가 2 1 4 3 라면 C를 인쇄하고, 다음으로 D를 인쇄하고 A, B를 인쇄하게 된다.  
여러분이 할 일은, 현재 Queue에 있는 문서의 수와 중요도가 주어졌을 때, 어떤 한 문서가 몇 번째로 인쇄되는지 알아내는 것이다. 예를 들어 위의 예에서 C문서는 1번째로, A문서는 3번째로 인쇄되게 된다.  

### 입력
첫 줄에 테스트케이스의 수가 주어진다. 각 테스트케이스는 두 줄로 이루어져 있다.  
테스트케이스의 첫 번째 줄에는 문서의 개수 $N(1 ≤ N ≤ 100)$과, 몇 번째로 인쇄되었는지 궁금한 문서가 현재 Queue에서 몇 번째에 놓여 있는지를 나타내는 정수 $M(0 ≤ M < N)$이 주어진다. 이때 맨 왼쪽은 0번째라고 하자. 두 번째 줄에는 N개 문서의 중요도가 차례대로 주어진다. 중요도는 1 이상 9 이하의 정수이고, 중요도가 같은 문서가 여러 개 있을 수도 있다.

### 출력
각 테스트 케이스에 대해 문서가 몇 번째로 인쇄되는지 출력한다. 
<br/><br/><br/>

## ◽ 풀이
---

- 큐(Queue) : 선입선출(FIFO) 방식의 자료구조. 스택(Stack)과 반대되는 개념이다.

```python
tc = int(input())                           # 테스트 케이스 받음

for _ in range(tc):                         # 테스트 케이스마다
    n, m = map(int, input().split())        # input값을 n, m으로 받고
    lst = [i for i in range(n)]             # 인덱스 리스트 생성
    i_f = list(map(int, input().split()))   # 중요도 input을 리스트로 받음
    cnt = 0                                 # 출력 횟수 카운트 객체 생성

    while m in lst:                         # m이 리스트 안에 있을 때
        if i_f[0] < max(i_f):               # 왼쪽 끝 인자가 최대 중요도가 아니라면
            a = i_f.pop(0)                  # 해당 인자를 빼서
            i_f.append(a)                   # 맨 끝에 붙임
            b = lst.pop(0)                  # 인덱스 리스트도 동일하게 수행
            lst.append(b)
        else:                               # 최대 중요도가 맞다면
            a = i_f.pop(0)                  # 해당 인자를 출력함
            b = lst.pop(0)                  # 인덱스 리스트도 동일하게 수행하고
            cnt += 1                        # 출력 횟수 카운트
    print(cnt)
```

해당 문제에서 deque 생성해서 풀면, 맨 왼쪽 요소 구할 때 $O(1)$이 돼서 시간복잡도가 낮아진다.  
그렇게 풀까 했는데… 최대한 모듈 사용을 지양하려고 좀 더 무식하게 풀었다. 어차피 방법 숙지하고 있으니 괜찮을 것 같음  